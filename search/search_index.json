{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Devtools","text":""},{"location":"#structure","title":"Structure","text":"<pre><code>.\n\u251c\u2500\u2500 pyproject.toml\n\u251c\u2500\u2500 requirements-dev.txt\n\u251c\u2500\u2500 requirements.txt\n\u251c\u2500\u2500 ... other config files ...\n\u251c\u2500\u2500 docs\n\u2502   \u251c\u2500\u2500 api.md\n\u2502   \u2514\u2500\u2500 index.md\n\u251c\u2500\u2500 examples\n\u2502   \u2514\u2500\u2500 main.py\n\u251c\u2500\u2500 package\n\u2502   \u251c\u2500\u2500 core\n\u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502   \u251c\u2500\u2500 directory.py\n\u2502   \u2502   \u251c\u2500\u2500 dotcleaner.py\n\u2502   \u2502   \u2514\u2500\u2500 rename.py\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 cli.py\n\u2502   \u2514\u2500\u2500 version.py\n\u2514\u2500\u2500 tests\n    \u251c\u2500\u2500 conftest.py\n    \u2514\u2500\u2500 test_package.py\n</code></pre>"},{"location":"#commands","title":"Commands","text":"<pre><code># install (local)\n$ python -m venv venv\n$ /venv/bin/pip install -e .\n</code></pre> <pre><code># ruff\n$ ruff check .\n$ ruff check --fix .\n</code></pre> <pre><code># pre-commit\n$ pre-commit install\n$ pre-commit run --all-files\n</code></pre> <pre><code># test\n$ pytest .\n</code></pre> <pre><code># code coverage\n$ pytest --cov=fastvector tests --cov-report=html\n</code></pre> <pre><code># mkdocs\n$ mkdocs build\n$ mkdocs serve\n</code></pre> <pre><code># build package\n$ make\n</code></pre>"},{"location":"#roadmap","title":"Roadmap","text":"<ul> <li>[X] dotcleaner</li> <li>[X] frename<ul> <li>[X] folder-rename</li> <li>[ ] file-rename</li> </ul> </li> <li>[ ] parser</li> </ul> <p>See the open issues for a full list of proposed features (and known issues).</p>"},{"location":"#tools","title":"Tools","text":"<p>Python tool/modules used for project development.</p> <ul> <li><code>Lint</code> : ruff inclusive of (<code>flake8</code> <code>pylint</code> <code>autopep8</code> <code>pydocstyle</code>), mypy, isort and black.</li> <li><code>Test</code> : Pytest and codecov.</li> <li><code>Documentations</code> : mkdocs, mkdocs-material and mkdocstrings.</li> <li><code>Build</code> : build and twine.</li> <li><code>CI</code> : pre-commit and github-actions.</li> </ul>"},{"location":"#license","title":"License","text":"<p>Distributed under the MIT License. See <code>LICENSE.txt</code> for more information.</p>"},{"location":"about/","title":"About","text":"<p>About the project and author.</p>"},{"location":"installation/","title":"Installation","text":"<p><code>package</code> is available as <code>package</code> on PyPI:</p> <pre><code>pip install &lt;package&gt;\n</code></pre> <p>For macOS Homebrew <code>package</code> is also available as <code>package</code> on Homebrew:</p> <pre><code>brew install &lt;package&gt;\n</code></pre> <p>For Ubuntu users, <code>package</code> is also availabe as <code>package</code> on ubuntu.org.</p> <pre><code>sudo apt install &lt;package&gt;\n</code></pre>"},{"location":"installation/#build-wheel","title":"Build Wheel","text":"<p>A simple, correct Python build frontend.</p> <pre><code>$ python -m build\n</code></pre>"},{"location":"installation/#build-docker","title":"Build Docker","text":"<p>Build an image from a Dockerfile.</p> <pre><code>$ docker build .\n</code></pre>"},{"location":"interface/","title":"References","text":""},{"location":"interface/#devtools.core.directory.DirectoryManager","title":"<code>DirectoryManager</code>","text":"<p>A class to manage path finding and bifercation.</p> Source code in <code>devtools/core/directory.py</code> <pre><code>class DirectoryManager:\n\"\"\"A class to manage path finding and bifercation.\n    \"\"\"\n    def __init__(self, path: Path | None) -&gt; None:\n        if path is None:\n            self.path = Path(\".\")\n        elif isinstance(path, Path):\n            self.path = path\n        else:\n            raise ValueError(\"Object of type `pathlib.path` required.\")\n\n    def __str__(self) -&gt; str:\n        return self.path.name\n\n    def get_path_list(self) -&gt; list:\n        paths = []\n        for path in self.path.glob(\"**/*\"):\n            paths.append(path)\n        return paths\n\n    def get_directories(self) -&gt; list:\n        directory = []\n        for path in self.get_path_list():\n            if path.is_dir():\n                directory.append(path)\n        return directory\n\n    def get_files(self) -&gt; list:\n        files = []\n        for path in self.get_path_list():\n            if path.is_file():\n                files.append(path)\n        return files\n\n    def find_extension(self, ext: str) -&gt; list:\n        files = []\n        for path in self.get_files():\n            if path.suffix == ext:\n                files.append(path)\n        return files\n\n    def find_file(self, file_name: str) -&gt; list:\n        files = []\n        for path in self.get_files():\n            if path.parts[-1].lower() == file_name:\n                files.append(path)\n        return files\n</code></pre>"},{"location":"interface/#devtools.core.dotcleaner.DirectoryMetaCleaner","title":"<code>DirectoryMetaCleaner</code>","text":"<p>         Bases: <code>DirectoryManager</code></p> <p>A class to find <code>.</code> dot files and remove them.</p> <p>Parameters:</p> Name Type Description Default <code>DirectoryManager</code> <code>object</code> <p>Path finding</p> required Source code in <code>devtools/core/dotcleaner.py</code> <pre><code>class DirectoryMetaCleaner(DirectoryManager):\n\"\"\"A class to find `.` dot files and remove them.\n\n    Args:\n        DirectoryManager (object): Path finding\n    \"\"\"\n\n    def __init__(self, path: Path | None) -&gt; None:\n        super().__init__(path)\n\n    def dot_finder(self) -&gt; list:\n        files = []\n        for path in self.get_files():\n            if path.name.startswith(\".\"):\n                files.append(path)\n        return files\n\n    def dot_cleaner(self, remove_file: str) -&gt; None:\n        for path in self.dot_finder():\n            if path.name == remove_file:\n                path.unlink()\n                print(f\"removing {path}\")\n</code></pre>"},{"location":"interface/#devtools.core.rename.DirectoryRename","title":"<code>DirectoryRename</code>","text":"<p>         Bases: <code>DirectoryManager</code></p> <p>A class to find folder and rename them.</p> <p>Parameters:</p> Name Type Description Default <code>DirectoryManager</code> <code>object</code> <p>Path finding</p> required Source code in <code>devtools/core/rename.py</code> <pre><code>class DirectoryRename(DirectoryManager):\n\"\"\"A class to find folder and rename them.\n\n    Args:\n        DirectoryManager (object): Path finding\n    \"\"\"\n\n    def __init__(self, path: Path) -&gt; None:\n        super().__init__(path)\n\n    def rename_file(self, file_name: str, new_name: str) -&gt; list:\n        new_paths = []\n        for path in self.find_file(file_name=file_name):\n            new_path = path.with_name(new_name)\n            path.replace(new_path)\n            new_paths.append(new_path)\n        return new_paths\n\n    def rename_directories(self, keywords: dict | None) -&gt; None:\n        keywords = {\"_\": \"-\", \" \": \"-\"} if keywords is None else keywords\n        new_paths = []\n        for path in self.get_directories():\n            new_name = path.name.lower()\n            for keyword, value in keywords.items():\n                new_name = new_name.replace(keyword, value)\n            new_path = path.with_name(new_name)\n            path.replace(new_path)\n            new_paths.append(new_path)\n            print(f\"renamed {new_paths}\")\n</code></pre>"},{"location":"usage/","title":"Using Package","text":"<p>About how to use package.</p>"}]}